<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.core" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.local" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.ftp" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.dstore" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- These generally call the generated assemble scripts (named in         -->
	<!-- ${assembleScriptName}) but may also add pre and post processing       -->
	<!-- Add one target for each root element and each configuration           -->
	<!-- ===================================================================== -->

	<target name="assemble.org.eclipse.rse.core">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>

	<target name="assemble.org.eclipse.rse.local">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>

	<target name="assemble.org.eclipse.rse.ftp">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>

	<target name="assemble.org.eclipse.rse.dstore">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles">
		<!-- Notify recipients that build has started.-->
		<!--
		<property name="cvsRoot" value=":pserver:build@dbgaix2:/usr/vatpfcvs" />
		<property name="mapVersionTag" value="HEAD" />
		<cvs cvsRoot="${cvsRoot}"
			package="MenuEditorBuilder"
			dest="${buildDirectory}/maps"
			tag="${mapVersionTag}"
		/>
		-->
		<copy todir="${buildDirectory}/maps">
			<fileset dir="." includes="*.map" />
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
		<!-- clean up the old driver -->
		<!--	<delete includeEmptyDirs="true">-->
		<!--
		<fileset dir="${buildDirectory}\plugins" casesensitive="yes" defaultexcludes="no">
			<include name="org.eclipse.*/**" />
		</fileset>
		<fileset dir="${buildDirectory}\features" casesensitive="yes" defaultexcludes="no">
			<include name="org.eclipse.*/**" />
		</fileset>
		<fileset dir="${builddest}" casesensitive="yes" defaultexcludes="yes">
			<include name="full/eclipse/**" />
			<include name="full/Config/**" />
			<include name="lite/**" />
		</fileset>
		<fileset dir="${head}\eclipse\plugins" casesensitive="yes" defaultexcludes="yes">
			<include name="org.eclipse.*/**" />
		</fileset>
		<fileset dir="${head}\eclipse\features" casesensitive="yes" defaultexcludes="no">
			<include name="org.eclipse.*/**" />
		</fileset>
		-->
		<!--	</delete>-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
		<antcall target="serverruntime" />
		<antcall target="hideServerStuff" />
		<antcall target="allElements">
			<param name="target" value="gatherSources" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
		<antcall target="revealServerStuff" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<property name="packageSDKDirectory" location="${packageDirectory}/sdk" />
		<property name="packageRuntimeDirectory" location="${packageDirectory}/runtime" />
		<mkdir dir="${packageDirectory}" />
		<mkdir dir="${packageRuntimeDirectory}" />
		<mkdir dir="${packageSDKDirectory}" />
		<unzip src="${buildDirectory}/${buildLabel}/org.eclipse.rse.core-${buildId}.zip" dest="${packageSDKDirectory}" />
		<unzip src="${buildDirectory}/${buildLabel}/org.eclipse.rse.dstore-${buildId}.zip" dest="${packageSDKDirectory}" />
		<unzip src="${buildDirectory}/${buildLabel}/org.eclipse.rse.ftp-${buildId}.zip" dest="${packageSDKDirectory}" />
		<unzip src="${buildDirectory}/${buildLabel}/org.eclipse.rse.local-${buildId}.zip" dest="${packageSDKDirectory}" />
		<zip destfile="${packageDirectory}/RSE-SDK-${buildId}.zip" basedir="${packageSDKDirectory}" />
		<tar destfile="${packageDirectory}/RSE-SDK-${buildId}.tar" basedir="${packageSDKDirectory}" />
		<delete dir="$packageSDKDirectory}" />
		<delete dir="$packageRuntimeDirectory}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish" if="doPublish">
		<mkdir dir="${publishDirectory}" />
		<copy todir="${publishDirectory}">
			<fileset dir="${packageDirectory}" includes="*.zip" />
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

	<!-- =====================================================================
	     Specialized targets to build the server runtime.           
	     ===================================================================== -->

	<target name="serverruntime">

		<property name="working" value="${packageDirectory}/rseserver"/>
		<mkdir dir="${working}" />
		<mkdir dir="${working}/jars" />

		<copy todir="${working}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.rse.services.dstore/serverruntime" includes="**" />
		</copy>

		<copy todir="${working}/jars">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.dstore.core" includes="dstore_core.jar" />
			<fileset dir="${buildDirectory}/plugins/org.eclipse.dstore.extra" includes="dstore_extra_server.jar" />
			<fileset dir="${buildDirectory}/plugins/org.eclipse.rse.services" includes="clientserver.jar" />
			<fileset dir="${buildDirectory}/plugins/org.eclipse.rse.services.dstore" includes="dstore_miners.jar" />
		</copy>

		<antcall target="rseserver-os">
			<param name="os" value="aix"/>
			<param name="eol" value="lf"/>
		</antcall>
		<antcall target="rseserver-os">
			<param name="os" value="unix"/>
			<param name="eol" value="lf"/>
		</antcall>
		<antcall target="rseserver-os">
			<param name="os" value="linux"/>
			<param name="eol" value="lf"/>
		</antcall>
		<antcall target="rseserver-os">
			<param name="os" value="windows"/>
			<param name="eol" value="crlf"/>
		</antcall>

		<delete dir="${working}" />

	</target>

	<target name="rseserver-os">
		<mkdir dir="${working}/collector" />
		<copy todir="${working}/collector">
			<fileset dir="${working}/scripts/${os}" includes="*"/>
		</copy>
		<chmod perm="+x">
			<fileset dir="${working}/collector" includes="*"/>
		</chmod>
		<copy todir="${working}/collector">
			<fileset dir="${working}/data" includes="*"/>
		</copy>
		<fixcrlf srcdir="${working}/collector" eol="${eol}" eof="asis" includes="*"/>
		<copy todir="${working}/collector">
			<fileset dir="${working}/jars" includes="*"/>
		</copy>
		<chmod perm="+x">
			<fileset dir="${working}/collector" includes="*.jar"/>
		</chmod>
		<tar destfile="${packageDirectory}\rseserver-${buildId}-${os}.tar" basedir="${working}/collector" includes="*"/>
		<zip destfile="${packageDirectory}\rseserver-${buildId}-${os}.zip" basedir="${working}/collector" includes="*"/>
		<delete dir="${working}/collector" />
	</target>

	<!-- =====================================================================
	     Specialized targets hide/reveal the server stuff so it doesn't get packaged
	     in the client.          
	     ===================================================================== -->

	<target name="hideServerStuff">
		<mkdir dir="${buildDirectory}/hidden"/>
		<move todir="${buildDirectory}/hidden">
			<fileset dir="${buildDirectory}/plugins" includes="**/*.jar" />
			<fileset dir="${buildDirectory}/plugins" includes="**/*src.zip" excludes="**/src.zip"/>
		</move>
	</target>

	<target name="revealServerStuff">
		<move todir="${buildDirectory}/plugins">
			<fileset dir="${buildDirectory}/hidden" includes="**" />
		</move>
		<delete dir="${buildDirectory}/hidden"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Zip the docs                                                          -->
	<!-- ===================================================================== -->
	<target name="zipDoc">
		<zip destfile="${buildDirectory}\plugins\${docPluginID}\doc.zip" filesonly="false" defaultexcludes="true">
			<fileset dir="${buildDirectory}\plugins\${docPluginID}" defaultexcludes="true">
				<include name="**/*.gif" />
				<include name="**/*.html" />
				<include name="**/*.htm" />
				<include name="**/*.GIF" />
				<include name="**/*.HTML" />
				<include name="**/*.HTM" />
				<include name="**/*.css" />
			</fileset>
		</zip>
	</target>

</project>
